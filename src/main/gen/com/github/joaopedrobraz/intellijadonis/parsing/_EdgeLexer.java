// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: edge.flex

// Based on https://github.com/edge-js/lexer, https://github.com/edge-js/parser and https://github.com/edge-js/edge

package com.github.joaopedrobraz.intellijadonis.parsing;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@SuppressWarnings("ALL")
final class _EdgeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int tag = 2;
  public static final int tag_content = 4;
  public static final int tag_content_each = 6;
  public static final int tag_identifier = 8;
  public static final int curly_braces = 10;
  public static final int raw_curly_braces = 12;
  public static final int comment = 14;
  public static final int content = 16;
  public static final int swallow_new_line = 18;
  public static final int YYINITIAL_NO_TAG = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\2\22\0\1\1\1\4"+
    "\2\0\1\5\3\0\1\6\1\7\2\0\1\10\1\11"+
    "\1\12\1\0\12\13\6\0\1\14\32\15\4\0\1\15"+
    "\1\0\10\15\1\16\4\15\1\17\14\15\1\20\1\0"+
    "\1\21\1\22\6\0\1\3\32\0\1\23\11\0\1\24"+
    "\12\0\1\24\4\0\1\24\5\0\27\24\1\0\37\24"+
    "\1\0\u01ca\24\4\0\14\24\16\0\5\24\7\0\1\24"+
    "\1\0\1\24\21\0\165\24\1\0\2\24\2\0\4\24"+
    "\1\0\1\24\6\0\1\24\1\0\3\24\1\0\1\24"+
    "\1\0\24\24\1\0\123\24\1\0\213\24\1\0\255\24"+
    "\1\0\46\24\2\0\1\24\6\0\51\24\10\0\55\24"+
    "\1\0\1\24\1\0\2\24\1\0\2\24\1\0\1\24"+
    "\10\0\33\24\4\0\4\24\35\0\13\24\5\0\112\24"+
    "\4\0\146\24\1\0\10\24\2\0\12\24\1\0\23\24"+
    "\2\0\1\24\20\0\73\24\2\0\145\24\16\0\66\24"+
    "\4\0\1\24\2\0\1\24\2\0\56\24\22\0\34\24"+
    "\4\0\13\24\65\0\25\24\1\0\10\24\25\0\17\24"+
    "\1\0\201\24\2\0\12\24\1\0\23\24\1\0\10\24"+
    "\2\0\2\24\2\0\26\24\1\0\7\24\1\0\1\24"+
    "\3\0\4\24\2\0\11\24\2\0\2\24\2\0\4\24"+
    "\10\0\1\24\4\0\2\24\1\0\5\24\2\0\14\24"+
    "\12\0\1\24\1\0\1\24\2\0\3\24\1\0\6\24"+
    "\4\0\2\24\2\0\26\24\1\0\7\24\1\0\2\24"+
    "\1\0\2\24\1\0\2\24\2\0\1\24\1\0\5\24"+
    "\4\0\2\24\2\0\3\24\3\0\1\24\7\0\4\24"+
    "\1\0\1\24\7\0\20\24\13\0\3\24\1\0\11\24"+
    "\1\0\3\24\1\0\26\24\1\0\7\24\1\0\2\24"+
    "\1\0\5\24\2\0\12\24\1\0\3\24\1\0\3\24"+
    "\2\0\1\24\17\0\4\24\2\0\12\24\11\0\7\24"+
    "\1\0\3\24\1\0\10\24\2\0\2\24\2\0\26\24"+
    "\1\0\7\24\1\0\2\24\1\0\5\24\2\0\11\24"+
    "\2\0\2\24\2\0\3\24\10\0\2\24\4\0\2\24"+
    "\1\0\5\24\2\0\12\24\1\0\1\24\20\0\2\24"+
    "\1\0\6\24\3\0\3\24\1\0\4\24\3\0\2\24"+
    "\1\0\1\24\1\0\2\24\3\0\2\24\3\0\3\24"+
    "\3\0\14\24\4\0\5\24\3\0\3\24\1\0\4\24"+
    "\2\0\1\24\6\0\1\24\16\0\12\24\20\0\15\24"+
    "\1\0\3\24\1\0\27\24\1\0\20\24\3\0\10\24"+
    "\1\0\3\24\1\0\4\24\7\0\2\24\1\0\3\24"+
    "\5\0\4\24\2\0\12\24\20\0\4\24\1\0\10\24"+
    "\1\0\3\24\1\0\27\24\1\0\12\24\1\0\5\24"+
    "\2\0\11\24\1\0\3\24\1\0\4\24\7\0\2\24"+
    "\7\0\1\24\1\0\4\24\2\0\12\24\1\0\2\24"+
    "\15\0\4\24\1\0\10\24\1\0\3\24\1\0\63\24"+
    "\1\0\3\24\1\0\5\24\5\0\4\24\7\0\5\24"+
    "\2\0\12\24\12\0\6\24\2\0\2\24\1\0\22\24"+
    "\3\0\30\24\1\0\11\24\1\0\1\24\2\0\7\24"+
    "\3\0\1\24\4\0\6\24\1\0\1\24\1\0\10\24"+
    "\6\0\12\24\2\0\2\24\15\0\72\24\5\0\17\24"+
    "\1\0\12\24\47\0\2\24\1\0\1\24\1\0\5\24"+
    "\1\0\30\24\1\0\1\24\1\0\27\24\2\0\5\24"+
    "\1\0\1\24\1\0\6\24\2\0\12\24\2\0\4\24"+
    "\40\0\1\24\27\0\2\24\6\0\12\24\13\0\1\24"+
    "\1\0\1\24\1\0\1\24\4\0\12\24\1\0\44\24"+
    "\4\0\24\24\1\0\22\24\1\0\44\24\11\0\1\24"+
    "\71\0\112\24\6\0\116\24\2\0\46\24\1\0\1\24"+
    "\5\0\1\24\2\0\53\24\1\0\115\24\1\0\4\24"+
    "\2\0\7\24\1\0\1\24\1\0\4\24\2\0\51\24"+
    "\1\0\4\24\2\0\41\24\1\0\4\24\2\0\7\24"+
    "\1\0\1\24\1\0\4\24\2\0\17\24\1\0\71\24"+
    "\1\0\4\24\2\0\103\24\2\0\3\24\40\0\20\24"+
    "\20\0\126\24\2\0\6\24\3\0\u016c\24\2\0\21\24"+
    "\1\23\32\24\5\0\113\24\3\0\13\24\7\0\15\24"+
    "\1\0\7\24\13\0\25\24\13\0\24\24\14\0\15\24"+
    "\1\0\3\24\1\0\2\24\14\0\124\24\3\0\1\24"+
    "\4\0\2\24\2\0\12\24\41\0\3\24\2\0\12\24"+
    "\6\0\131\24\7\0\53\24\5\0\106\24\12\0\37\24"+
    "\1\0\14\24\4\0\14\24\12\0\50\24\2\0\5\24"+
    "\13\0\54\24\4\0\32\24\6\0\12\24\46\0\34\24"+
    "\4\0\77\24\1\0\35\24\2\0\13\24\6\0\12\24"+
    "\15\0\1\24\10\0\17\24\101\0\114\24\4\0\12\24"+
    "\21\0\11\24\14\0\164\24\14\0\70\24\10\0\12\24"+
    "\3\0\61\24\2\0\11\24\7\0\53\24\2\0\3\24"+
    "\20\0\3\24\1\0\47\24\5\0\372\24\1\0\33\24"+
    "\2\0\6\24\2\0\46\24\2\0\6\24\2\0\10\24"+
    "\1\0\1\24\1\0\1\24\1\0\1\24\1\0\37\24"+
    "\2\0\65\24\1\0\7\24\1\0\1\24\3\0\3\24"+
    "\1\0\7\24\3\0\4\24\2\0\6\24\4\0\15\24"+
    "\5\0\3\24\1\0\7\24\3\0\13\23\35\0\2\3"+
    "\5\0\1\23\17\0\2\24\23\0\1\24\12\0\1\23"+
    "\21\0\1\24\15\0\1\24\20\0\15\24\63\0\41\24"+
    "\21\0\1\24\4\0\1\24\2\0\12\24\1\0\1\24"+
    "\3\0\5\24\6\0\1\24\1\0\1\24\1\0\1\24"+
    "\1\0\4\24\1\0\13\24\2\0\4\24\5\0\5\24"+
    "\4\0\1\24\21\0\51\24\u022d\0\64\24\26\0\57\24"+
    "\1\0\57\24\1\0\205\24\6\0\11\24\14\0\46\24"+
    "\1\0\1\24\5\0\1\24\2\0\70\24\7\0\1\24"+
    "\17\0\30\24\11\0\7\24\1\0\7\24\1\0\7\24"+
    "\1\0\7\24\1\0\7\24\1\0\7\24\1\0\7\24"+
    "\1\0\7\24\1\0\40\24\57\0\1\24\320\0\1\23"+
    "\4\0\3\24\31\0\17\24\1\0\5\24\2\0\5\24"+
    "\4\0\126\24\2\0\2\24\2\0\3\24\1\0\132\24"+
    "\1\0\4\24\5\0\53\24\1\0\136\24\21\0\33\24"+
    "\65\0\306\24\112\0\360\24\20\0\215\24\103\0\56\24"+
    "\2\0\15\24\3\0\34\24\24\0\63\24\1\0\12\24"+
    "\1\0\163\24\45\0\11\24\2\0\147\24\2\0\65\24"+
    "\2\0\5\24\60\0\61\24\30\0\64\24\14\0\106\24"+
    "\12\0\12\24\6\0\30\24\3\0\1\24\1\0\61\24"+
    "\2\0\44\24\14\0\35\24\3\0\101\24\16\0\13\24"+
    "\6\0\37\24\1\0\67\24\11\0\16\24\2\0\12\24"+
    "\6\0\27\24\3\0\111\24\30\0\3\24\2\0\20\24"+
    "\2\0\5\24\12\0\6\24\2\0\6\24\2\0\6\24"+
    "\11\0\7\24\1\0\7\24\1\0\53\24\1\0\14\24"+
    "\10\0\173\24\1\0\2\24\2\0\12\24\6\0\244\24"+
    "\14\0\27\24\4\0\61\24\4\0\u0100\25\156\24\2\0"+
    "\152\24\46\0\7\24\14\0\5\24\5\0\14\24\1\0"+
    "\15\24\1\0\5\24\1\0\1\24\1\0\2\24\1\0"+
    "\2\24\1\0\154\24\41\0\153\24\22\0\100\24\2\0"+
    "\66\24\50\0\14\24\4\0\20\24\20\0\20\24\3\0"+
    "\2\24\30\0\3\24\40\0\5\24\1\0\207\24\23\0"+
    "\12\24\7\0\32\24\4\0\1\24\1\0\32\24\13\0"+
    "\131\24\3\0\6\24\2\0\6\24\2\0\6\24\2\0"+
    "\3\24\43\0\14\24\1\0\32\24\1\0\23\24\1\0"+
    "\2\24\1\0\17\24\2\0\16\24\42\0\173\24\105\0"+
    "\65\24\210\0\1\24\202\0\35\24\3\0\61\24\17\0"+
    "\1\24\37\0\40\24\15\0\36\24\5\0\53\24\5\0"+
    "\36\24\2\0\44\24\4\0\10\24\1\0\5\24\52\0"+
    "\236\24\2\0\12\24\6\0\44\24\4\0\44\24\4\0"+
    "\50\24\10\0\64\24\234\0\67\24\11\0\26\24\12\0"+
    "\10\24\230\0\6\24\2\0\1\24\1\0\54\24\1\0"+
    "\2\24\3\0\1\24\2\0\27\24\12\0\27\24\11\0"+
    "\37\24\101\0\23\24\1\0\2\24\12\0\26\24\12\0"+
    "\32\24\106\0\70\24\6\0\2\24\100\0\4\24\1\0"+
    "\2\24\5\0\10\24\1\0\3\24\1\0\35\24\2\0"+
    "\3\24\4\0\1\24\40\0\35\24\3\0\35\24\43\0"+
    "\10\24\1\0\36\24\31\0\66\24\12\0\26\24\12\0"+
    "\23\24\15\0\22\24\156\0\111\24\67\0\63\24\15\0"+
    "\63\24\15\0\50\24\10\0\12\24\306\0\35\24\12\0"+
    "\1\24\10\0\41\24\217\0\27\24\11\0\107\24\37\0"+
    "\12\24\17\0\74\24\25\0\31\24\7\0\12\24\6\0"+
    "\65\24\1\0\12\24\4\0\3\24\11\0\44\24\2\0"+
    "\1\24\11\0\105\24\4\0\4\24\3\0\13\24\1\0"+
    "\1\24\43\0\22\24\1\0\45\24\6\0\1\24\101\0"+
    "\7\24\1\0\1\24\1\0\4\24\1\0\17\24\1\0"+
    "\12\24\7\0\73\24\5\0\12\24\6\0\4\24\1\0"+
    "\10\24\2\0\2\24\2\0\26\24\1\0\7\24\1\0"+
    "\2\24\1\0\5\24\1\0\12\24\2\0\2\24\2\0"+
    "\3\24\2\0\1\24\6\0\1\24\5\0\7\24\2\0"+
    "\7\24\3\0\5\24\213\0\113\24\5\0\12\24\4\0"+
    "\2\24\40\0\106\24\1\0\1\24\10\0\12\24\246\0"+
    "\66\24\2\0\11\24\27\0\6\24\42\0\101\24\3\0"+
    "\1\24\13\0\12\24\46\0\71\24\7\0\12\24\66\0"+
    "\33\24\2\0\17\24\4\0\12\24\306\0\73\24\145\0"+
    "\112\24\25\0\1\24\240\0\10\24\2\0\56\24\2\0"+
    "\10\24\1\0\2\24\33\0\77\24\10\0\1\24\10\0"+
    "\112\24\3\0\1\24\42\0\71\24\7\0\11\24\1\0"+
    "\55\24\1\0\11\24\17\0\12\24\30\0\36\24\2\0"+
    "\26\24\1\0\16\24\111\0\7\24\1\0\2\24\1\0"+
    "\54\24\3\0\1\24\1\0\2\24\1\0\11\24\10\0"+
    "\12\24\6\0\6\24\1\0\2\24\1\0\45\24\1\0"+
    "\2\24\1\0\6\24\7\0\12\24\u0136\0\27\24\11\0"+
    "\232\24\146\0\157\24\21\0\304\24\274\0\57\24\321\0"+
    "\107\24\271\0\71\24\7\0\37\24\1\0\12\24\146\0"+
    "\36\24\2\0\5\24\13\0\67\24\11\0\4\24\14\0"+
    "\12\24\11\0\25\24\5\0\23\24\260\0\100\24\200\0"+
    "\113\24\4\0\71\24\7\0\21\24\100\0\2\24\1\0"+
    "\1\24\34\0\370\24\10\0\363\24\15\0\37\24\61\0"+
    "\3\24\21\0\4\24\10\0\u018c\24\4\0\153\24\5\0"+
    "\15\24\3\0\11\24\7\0\12\24\3\0\2\24\306\0"+
    "\5\24\3\0\6\24\10\0\10\24\2\0\7\24\36\0"+
    "\4\24\224\0\3\24\273\0\125\24\1\0\107\24\1\0"+
    "\2\24\2\0\1\24\2\0\2\24\2\0\4\24\1\0"+
    "\14\24\1\0\1\24\1\0\7\24\1\0\101\24\1\0"+
    "\4\24\2\0\10\24\1\0\7\24\1\0\34\24\1\0"+
    "\4\24\1\0\5\24\1\0\1\24\3\0\7\24\1\0"+
    "\u0154\24\2\0\31\24\1\0\31\24\1\0\37\24\1\0"+
    "\31\24\1\0\37\24\1\0\31\24\1\0\37\24\1\0"+
    "\31\24\1\0\37\24\1\0\31\24\1\0\10\24\2\0"+
    "\151\24\4\0\62\24\10\0\1\24\16\0\1\24\26\0"+
    "\5\24\1\0\17\24\120\0\7\24\1\0\21\24\2\0"+
    "\7\24\1\0\2\24\1\0\5\24\325\0\55\24\3\0"+
    "\16\24\2\0\12\24\4\0\1\24\u0171\0\72\24\6\0"+
    "\305\24\13\0\7\24\51\0\114\24\4\0\12\24\246\0"+
    "\4\24\1\0\33\24\1\0\2\24\1\0\1\24\2\0"+
    "\1\24\1\0\12\24\1\0\4\24\1\0\1\24\1\0"+
    "\1\24\6\0\1\24\4\0\1\24\1\0\1\24\1\0"+
    "\1\24\1\0\3\24\1\0\2\24\1\0\1\24\2\0"+
    "\1\24\1\0\1\24\1\0\1\24\1\0\1\24\1\0"+
    "\1\24\1\0\2\24\1\0\1\24\2\0\4\24\1\0"+
    "\7\24\1\0\4\24\1\0\4\24\1\0\1\24\1\0"+
    "\12\24\1\0\21\24\5\0\3\24\1\0\5\24\1\0"+
    "\21\24\164\0\32\24\6\0\32\24\6\0\32\24\166\0"+
    "\327\24\51\0\65\24\13\0\336\24\2\0\u0182\24\16\0"+
    "\u0131\24\37\0\36\24\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29696];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\7\0\1\2\1\0\2\1\1\3\1\1\1\4"+
    "\1\5\1\6\2\7\2\10\1\5\1\4\1\11\1\12"+
    "\1\13\1\5\1\10\2\14\1\15\1\16\1\17\2\20"+
    "\1\5\1\4\3\20\1\5\1\4\3\20\1\5\1\4"+
    "\1\20\2\2\2\21\1\1\1\4\1\1\1\3\1\1"+
    "\1\22\1\0\1\23\2\6\2\24\2\0\1\25\2\0"+
    "\1\26\6\0\1\1\1\23\1\0\1\27\1\0\1\30"+
    "\2\24\1\0\2\31\1\0\1\26\3\0\1\30\1\32"+
    "\1\33\2\24\1\34\2\35\1\0\1\36\1\33\1\35"+
    "\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\26\0\54\0\102\0\130\0\156\0\204\0\232"+
    "\0\260\0\306\0\334\0\362\0\u0108\0\u011e\0\u0134\0\u014a"+
    "\0\u0160\0\u0176\0\u018c\0\u0134\0\u01a2\0\u01a2\0\u01b8\0\u01ce"+
    "\0\u0134\0\u01e4\0\u01fa\0\u01b8\0\u0134\0\u014a\0\u0210\0\u0226"+
    "\0\u0134\0\u023c\0\u0252\0\u0252\0\u023c\0\u0268\0\u027e\0\u0294"+
    "\0\u0294\0\u027e\0\u02aa\0\u02c0\0\u02d6\0\u02d6\0\u02c0\0\u02ec"+
    "\0\u0302\0\u0318\0\u0134\0\u014a\0\u032e\0\u0108\0\u0344\0\u0134"+
    "\0\u035a\0\u0134\0\u0370\0\u0386\0\u039c\0\u03b2\0\u03c8\0\u03de"+
    "\0\u01b8\0\u03f4\0\u0134\0\u023c\0\u040a\0\u0420\0\u027e\0\u0436"+
    "\0\u044c\0\u02c0\0\u0462\0\u0478\0\u048e\0\u04a4\0\u04ba\0\u04d0"+
    "\0\u04e6\0\u04ba\0\u04fc\0\u0512\0\u0528\0\u0420\0\u0134\0\u053e"+
    "\0\u0554\0\u056a\0\u0580\0\u0596\0\u0134\0\u0134\0\u04ba\0\u039c"+
    "\0\u0134\0\u0528\0\u0554\0\u05ac\0\u05c2\0\u0134\0\u0134\0\u0134"+
    "\0\u0134";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\14\14\1\15\3\14\1\16\5\14\1\17\2\20\11\17"+
    "\1\21\11\17\1\22\1\23\1\20\1\17\21\22\1\17"+
    "\1\24\1\25\1\26\1\27\1\24\1\30\1\31\1\32"+
    "\1\33\4\24\3\30\3\24\1\34\1\24\1\17\1\35"+
    "\1\36\1\20\1\17\2\35\1\37\3\35\1\40\2\35"+
    "\3\40\2\35\1\41\2\35\1\17\1\42\1\43\1\44"+
    "\1\45\15\42\1\46\3\42\1\45\1\47\1\50\1\51"+
    "\1\52\15\47\1\53\3\47\1\52\1\54\1\55\1\56"+
    "\1\57\5\54\1\60\13\54\1\57\14\61\1\17\3\61"+
    "\1\62\5\61\1\63\1\64\1\20\1\17\21\63\1\17"+
    "\14\65\1\66\3\65\1\67\5\65\14\14\1\70\3\14"+
    "\1\71\5\14\14\0\1\72\3\0\1\73\5\0\14\14"+
    "\1\70\3\14\1\74\5\14\27\0\2\20\23\0\4\75"+
    "\1\76\5\75\1\77\1\0\1\75\3\100\4\75\1\0"+
    "\1\75\2\22\2\0\21\22\1\0\1\22\1\23\1\20"+
    "\1\0\21\22\2\0\2\26\1\101\4\0\1\33\5\0"+
    "\1\102\4\0\1\101\3\0\3\101\4\0\1\33\5\0"+
    "\1\102\4\0\1\101\7\0\1\30\5\0\1\30\1\0"+
    "\3\30\30\0\1\103\4\0\3\33\17\0\1\33\2\0"+
    "\2\37\2\0\21\37\13\0\1\40\2\0\3\40\6\0"+
    "\21\104\1\105\5\104\2\44\16\104\1\105\25\104\1\106"+
    "\4\104\21\107\1\110\5\107\2\51\16\107\1\110\25\107"+
    "\1\111\4\107\11\112\1\113\15\112\2\56\6\112\1\113"+
    "\25\112\1\114\14\112\14\61\1\0\3\61\1\62\21\61"+
    "\1\0\3\61\1\0\5\61\14\65\1\0\3\65\1\115"+
    "\21\65\1\0\3\65\1\116\5\65\14\14\1\70\3\14"+
    "\1\117\5\14\20\0\1\120\5\0\11\117\1\121\2\117"+
    "\1\70\3\117\1\122\5\117\13\75\1\0\1\75\3\0"+
    "\4\75\1\0\13\75\1\77\1\0\1\75\3\100\4\75"+
    "\1\0\2\75\3\123\6\75\1\77\1\0\1\75\3\100"+
    "\3\75\1\123\1\0\1\75\1\0\3\124\6\0\1\100"+
    "\2\0\3\100\3\0\1\124\21\0\1\125\6\0\21\104"+
    "\1\126\4\104\21\0\1\127\4\0\21\107\1\130\25\107"+
    "\1\131\4\107\11\112\1\132\25\112\1\132\7\112\1\133"+
    "\4\112\14\65\1\0\3\65\1\0\5\65\11\0\1\134"+
    "\6\0\1\135\5\0\14\117\1\70\11\117\20\0\1\136"+
    "\5\0\11\117\1\137\2\117\1\70\11\117\1\75\3\140"+
    "\7\75\1\0\1\75\3\0\3\75\1\140\1\0\1\75"+
    "\1\0\3\141\17\0\1\141\3\0\3\142\17\0\1\142"+
    "\2\0\21\107\1\143\4\107\21\0\1\144\4\0\11\112"+
    "\1\132\7\112\1\145\15\112\1\113\7\112\1\146\4\112"+
    "\11\0\1\147\35\0\1\150\4\0\11\112\1\113\7\112"+
    "\1\151\4\112";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1496];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\7\0\1\1\1\0\4\1\1\11\4\1\1\11"+
    "\4\1\1\11\3\1\1\11\3\1\1\11\21\1\1\11"+
    "\4\1\1\11\1\1\1\11\1\0\5\1\2\0\1\11"+
    "\2\0\1\1\6\0\2\1\1\0\1\1\1\0\3\1"+
    "\1\0\1\1\1\11\1\0\1\1\3\0\2\11\2\1"+
    "\1\11\3\1\1\0\4\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private static final HashMap<EdgeValidTags, Integer> CUSTOM_TAG_BEHAVIOR = new HashMap<>();
    static {
        CUSTOM_TAG_BEHAVIOR.put(EdgeValidTags.EACH, tag_content_each);
    }

    private int parenthesesCount = 0;
    private IElementType contentToReturn = null;
    private IElementType matchLastTokenAs = null;
    private String currentTag = "";

    private IElementType contentOrWhiteSpace(IElementType _contentToReturn) {
        return !yytext().toString().isBlank() ? _contentToReturn : EdgeTokenTypes.WHITE_SPACE;
    }

    private IElementType contentOrWhiteSpace() {
        return contentOrWhiteSpace(EdgeTokenTypes.HTML_CONTENT);
    }

    private void clearWhiteSpace() {
        int charsToPushBack = 0;
        for (int i = yylength() - 1; i > 0; i--) {
            char currentChar = yytext().charAt(i);
            if (String.valueOf(currentChar).isBlank()) charsToPushBack++;
            else break;
        }
        yypushback(charsToPushBack);
    }

    private String collectTill(CharSequence source, String stops) {
        StringBuilder collectedString = new StringBuilder();
        for (int i = 0; i < source.length(); i++) {
            char currentChar = source.charAt(i);
            if (stops.contains(String.valueOf(currentChar))) break;
            collectedString.append(currentChar);
        }
        return collectedString.toString();
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _EdgeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { String text = yytext().toString();
          if (yylength() > 1 && yycharat(yylength() - 1) == '{') yypushback(1);
          return contentOrWhiteSpace();
            }
          // fall through
          case 32: break;
          case 2:
            { return contentOrWhiteSpace();
            }
          // fall through
          case 33: break;
          case 3:
            { boolean abort = false;
          // Lookbehind, there must not be any of the "invalidTokens"
          String[] invalidTokens = { "@{{{", "@{{", "{{{", "{{" };
          String textMatch = yytext().toString();
          for (String invalidToken : invalidTokens) {
              int indexOfMatch = textMatch.indexOf(invalidToken);
              if (indexOfMatch > -1) {
                  yypushback(yylength());
                  yybegin(YYINITIAL_NO_TAG);
                  abort = true;
                  break;
              }
          }

          if (!abort) {
              // Quick short-circuit, if what immediately follows this match is another "@", this is an escaped tag
              if (zzBufferL.length() > zzMarkedPos && zzBufferL.charAt(zzMarkedPos) == '@') {
                  yypushback(yylength());
                  yybegin(YYINITIAL_NO_TAG);
                  abort = true;
              }
          }

          if (!abort) {
              boolean isValid = true;
              // Lookbehind, it must either be the beginning of the file OR a line break, optionally with white space
              if (yylength() > 1) {
                  for (int i = yylength() - 2; i > 0; i--) {
                      char currentChar = yytext().charAt(i);
                      if (currentChar == '\n' || currentChar == '\r') break;
                      if (!String.valueOf(currentChar).isBlank()) {
                          isValid = false;
                          break;
                      }
                  }
              }

              if (!isValid) {
                  if (yylength() > 0) return contentOrWhiteSpace();
              }

              // Lookahead, it must match a valid tag:
              // (\(.*?\)?)?~? (\s*$|\s*(\n\r|\r|\n))
              // !?<Identifier>\s{0,2}:
              //                       ~?<EOF|WHITESPACE>
              //                       (<CONTENT>*)<EOF|WHITESPACE>
              //                       (<CONTENT>*)~<EOF|WHITESPACE>
              //                       (<CONTENT>*<EOF|WHITESPACE>
              Pattern pattern = Pattern.compile("^(?<!@)!?[a-zA-Z._]+\\s{0,2}((\\(.*?\\))(\\s*$|\\s*(\\n\\r|\\r|\\n))|(\\(.*?\\))~(\\s*$|\\s*(\\n\\r|\\r|\\n))|(\\([^)]*)(\\s*$|\\s*(\\n\\r|\\r|\\n))|~?(\\s*$|\\s*(\\n\\r|\\r|\\n)))");
              String potentialTag = collectTill(zzBufferL.subSequence(zzMarkedPos, zzBufferL.length()), "\r\n");
              if (potentialTag.isBlank()) {
                  // A solitary tag
                  if (yytext().toString().trim().equals("@")) {
                      clearWhiteSpace();
                      return EdgeTokenTypes.TAG;
                  }
                  yypushback(1);
                  yybegin(tag);
                  if (yylength() > 0) return contentOrWhiteSpace();
              }
              Matcher matcher = pattern.matcher(potentialTag);
              if (!matcher.find()) {
                  if (yylength() > 0) return contentOrWhiteSpace();
              }

              // Yay! This is a valid tag
              yypushback(1);
              yybegin(tag);
              if (yylength() > 0) return contentOrWhiteSpace();
          }
            }
          // fall through
          case 34: break;
          case 4:
            { return EdgeTokenTypes.INVALID;
            }
          // fall through
          case 35: break;
          case 5:
            { return EdgeTokenTypes.WHITE_SPACE;
            }
          // fall through
          case 36: break;
          case 6:
            { yybegin(YYINITIAL); clearWhiteSpace(); return EdgeTokenTypes.TAG;
            }
          // fall through
          case 37: break;
          case 7:
            { if (parenthesesCount == 0) {
                  clearWhiteSpace();
                  if (yytext().toString().endsWith("~")) {
                      yypushback(1);
                      yybegin(swallow_new_line);
                  } else yybegin(YYINITIAL);
                  return EdgeTokenTypes.CLOSE_PARENTHESES;
              }

              clearWhiteSpace();
              if (!yytext().toString().endsWith(")") && !yytext().toString().endsWith(")~")) {
                  yypushback(yylength());
                  yybegin(YYINITIAL);
              } else {
                  int matchedChars = 0;
                  for (int i = 0; i < yylength(); i++) {
                      char currentChar = yytext().charAt(i);
                      parenthesesCount += currentChar == '(' ? 1 : (currentChar == ')' ? -1 : 0);
                      if (parenthesesCount == 0) {
                          yypushback(yylength() - matchedChars);
                          return EdgeTokenTypes.JAVASCRIPT_CONTENT;
                      }
                      matchedChars++;
                  }
              }
            }
          // fall through
          case 38: break;
          case 8:
            { yypushback(yylength()); yybegin(YYINITIAL);
            }
          // fall through
          case 39: break;
          case 9:
            { int matchedChars = 0;
              for (int i = 0; i < yylength(); i++) {
                  char currentChar = yytext().charAt(i);
                  if (String.valueOf(currentChar).isBlank()) {
                      break;
                  }
                  matchedChars++;
              }
              yypushback(yylength() - matchedChars);
              return EdgeTokenTypes.IDENTIFIER;
            }
          // fall through
          case 40: break;
          case 10:
            { return EdgeTokenTypes.OPEN_PARENTHESES;
            }
          // fall through
          case 41: break;
          case 11:
            { return EdgeTokenTypes.CLOSE_PARENTHESES;
            }
          // fall through
          case 42: break;
          case 12:
            { yypushback(1); yybegin(YYINITIAL);
            }
          // fall through
          case 43: break;
          case 13:
            { yypushback(yylength() - 1);
          yybegin(CUSTOM_TAG_BEHAVIOR.getOrDefault(EdgeValidTags.fromString(currentTag), tag_content));
          parenthesesCount = 1;
          return EdgeTokenTypes.OPEN_PARENTHESES;
            }
          // fall through
          case 44: break;
          case 14:
            { clearWhiteSpace();
              currentTag = yytext().toString();
              return EdgeTokenTypes.IDENTIFIER;
            }
          // fall through
          case 45: break;
          case 15:
            { yypushback(1); yybegin(swallow_new_line);
            }
          // fall through
          case 46: break;
          case 16:
            { /* If here, we have an unclosed braces */ yypushback(yylength()); yybegin(YYINITIAL);
            }
          // fall through
          case 47: break;
          case 17:
            { yybegin(YYINITIAL); return EdgeTokenTypes.COMMENT_CONTENT;
            }
          // fall through
          case 48: break;
          case 18:
            { return EdgeTokenTypes.HTML_CONTENT;
            }
          // fall through
          case 49: break;
          case 19:
            { yybegin(curly_braces);
              matchLastTokenAs = EdgeTokenTypes.CLOSE_CURLY_BRACES;
              contentToReturn = EdgeTokenTypes.JAVASCRIPT_CONTENT;
              return EdgeTokenTypes.OPEN_CURLY_BRACES;
            }
          // fall through
          case 50: break;
          case 20:
            { yybegin(tag_identifier);
          if (yytext().toString().startsWith("@!")) {
              yypushback(yylength() - 2);
              return EdgeTokenTypes.SELF_CLOSING_TAG;
          } else {
              yypushback(yylength() - 1);
              return EdgeTokenTypes.TAG;
          }
            }
          // fall through
          case 51: break;
          case 21:
            { yypushback(1); yybegin(swallow_new_line); return EdgeTokenTypes.CLOSE_PARENTHESES;
            }
          // fall through
          case 52: break;
          case 22:
            { yybegin(YYINITIAL); return matchLastTokenAs;
            }
          // fall through
          case 53: break;
          case 23:
            { yybegin(curly_braces);
              matchLastTokenAs = EdgeTokenTypes.COMMENT_CONTENT;
              contentToReturn = EdgeTokenTypes.HTML_CONTENT;
              return EdgeTokenTypes.COMMENT_CONTENT;
            }
          // fall through
          case 54: break;
          case 24:
            { yybegin(raw_curly_braces);
              matchLastTokenAs = EdgeTokenTypes.CLOSE_RAW_CURLY_BRACES;
              contentToReturn = EdgeTokenTypes.JAVASCRIPT_CONTENT;
              return EdgeTokenTypes.OPEN_RAW_CURLY_BRACES;
            }
          // fall through
          case 55: break;
          case 25:
            { yypushback(2); return contentOrWhiteSpace(contentToReturn);
            }
          // fall through
          case 56: break;
          case 26:
            { yybegin(raw_curly_braces);
              matchLastTokenAs = EdgeTokenTypes.COMMENT_CONTENT;
              contentToReturn = EdgeTokenTypes.HTML_CONTENT;
              return EdgeTokenTypes.COMMENT_CONTENT;
            }
          // fall through
          case 57: break;
          case 27:
            { yybegin(comment); return EdgeTokenTypes.OPEN_COMMENT;
            }
          // fall through
          case 58: break;
          case 28:
            { yybegin(tag_content); return EdgeTokenTypes.KEYWORD;
            }
          // fall through
          case 59: break;
          case 29:
            { yypushback(3); return contentOrWhiteSpace(contentToReturn);
            }
          // fall through
          case 60: break;
          case 30:
            { yybegin(YYINITIAL); return EdgeTokenTypes.CLOSE_COMMENT;
            }
          // fall through
          case 61: break;
          case 31:
            { yypushback(4); return contentOrWhiteSpace(EdgeTokenTypes.COMMENT_CONTENT);
            }
          // fall through
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
